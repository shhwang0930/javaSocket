비동기 > 작업 요청이 완료되는 시점에서 결과 처리

논블로킹 > 작업 완료여부와 상관없이 즉시 반환

클라이언트 -> 서버 -> 메세지 브로커 -> 다른 클라이언트

클라이언트
- 메세지를 송신
- 메세지 브로커로부터 수신

서버
- 클라이언트로 부터 수신
- 브로커로부터 송신

브로커
- 서버로 수신
- 클라이언트로부터 송신

1. 서버 브로커 클라


serverSocket - 서버 측에서 클라이언트의 연결요청 대기 > 연결을 수락
Socket - 클라이언트가 서버에 연결 요청 > 서버와의 연결, 데이터 송수신


클라이언트 > request 채널 >  서버 > 메세지 브로커(구독자 판별 기타 등등 기능) > 서버(구독한 구독자들에게 메세지 전송) > response 채널 > 클라이언트

1. 웹소켓 구현 v
2. 웹소켓에서 파일 통신 v


1. 클라이언트가 토픽을 구독
2. 서버에서 해당 구독한 토픽을 컬렉션에 저장

서버 실행시키고 클라이언트가 미리 들어가 있지않으면 에러 발생




java
io - 스트림으로 통신 > 단방향, 동기, 블로킹
nio - 채널로 통신 > 양방향 >> 읽기쓰기를 하나의 통로로 가능, 비동기, 논블로킹 지원
